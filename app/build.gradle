import io.github.httpbuilderng.http.HttpTask

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: "io.github.http-builder-ng.http-plugin"


//devicefarm {
//    projectName "emqapp"
//    devicePool "Pixel2"
//    authentication {
//        accessKey "AKIA3VR2PVWZSZGTKZOD"
//        secretKey "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"
//    }
//    executionTimeoutMinutes 15
//
//    instrumentation {
//        testSpecName "orch"
//    }
//
//    devicestate {
//        auxiliaryApps files(file("orchestrator-1.2.0.apk"), file("test-services-1.2.0.apk"))
//    }
//
//}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.daniel.demotest"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId "com.emq.emqapp2.test"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {

        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

//    splits {
//        abi {
//            enable true
//            reset()
//            include 'x86', 'armeabi-v7a', 'x86_64'
//            universalApk true
//        }
//    }

    afterEvaluate {
        if (tasks.findByPath("connectedDebugAndroidTest") != null) {
            connectedDebugAndroidTest.finalizedBy processJenkinsConsole, notifySlack
        }

        if (tasks.findByPath("assembleDebug") != null) {
            assembleDebug.finalizedBy zipForDevicefarm
        }
    }
}

task zipForDevicefarm(type: Zip) {
    archiveFileName = "devicefarm.zip"
    destinationDirectory = file("$buildDir/devicefarm")
    from "$buildDir/outputs/apk/debug/app-debug.apk"
    from "$buildDir/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
    from "$rootDir/app/orchestrator-1.2.0.apk"
    from "$rootDir/app/test-services-1.2.0.apk"
}

// * pairs, delimited by a start(1)/pass(0)/fail(-2)/error(-1) status code result. At end of test
String result = ""
task processJenkinsConsole(type: HttpTask){

    config {
        request.uri = 'http://localhost:8080'
        request.contentType = 'application/json'
        request.accept = '*'
        request.uri.path = '/job/staging/lastBuild/consoleText'
    }
    get {
        response.success { server, body ->
            String temp = ""
            result = "Detail report : http://localhost:8080/job/staging/lastBuild/testReport/\n"
            body.toString().eachLine { line ->
                if (line.contains("Checking out Revision")) {
                    int index = line.indexOf('origin/')
                    result += "Tested branch: " + line.substring(index + 7, line.length() - 1) + "\n"
                }
                if (line.contains("Commit message")) {
                    result += line.replace("\"", "") + "\n"
                }

                if (line.contains("INSTRUMENTATION_STATUS")) {

                    String prefix = "test="
                    if (line.contains(prefix)) {
                        temp = line.substring(line.indexOf(prefix) + 5)
                    }

                    prefix = "INSTRUMENTATION_STATUS_CODE"
                    if (line.contains(prefix)) {
                        if (line.contains(prefix + ": 0")) {
                            //passed
                            result += ":white_check_mark:" + temp + "\n"
                        } else if (line.contains(prefix + ": -1") || line.contains(prefix + ": -2")) {
                            //failed or error
                            result += ":x:" + temp + "\n"
                        }
                        temp = ""
                    }
                }
            }
        }
    }
}


task notifySlack(type: HttpTask){

    config {
        request.uri = 'https://hooks.slack.com'
        request.contentType = 'application/json'
        request.accept = '*'
        request.uri.path = '/services/T0327TX3A/BRN5699ME/2hWvPawLGya3CXJFxQGyl82S'
    }
    post {
        println(result)
        request.body = '{"text" : "'+ result +'"}'
        response.success {
            println 'The event notification was successful'
        }
    }
}

task buildPrintout(type: JavaExec) {
    android.applicationVariants.all { variant ->
        //Runt he java task for every flavor
        variant.productFlavors.each { flavor ->
            println "Triggering customer configuration for flavor " + flavor.name
            if (variant.buildType.name.equals('debug')) {
                //Run the java task only for release builds
                //Cant find the runtime classpath in android/gradle so I'll directly link to my jar file here. The jarfile contains the class I want to run (with the main method)
                classpath += files("libs/my-jarfile.jar")
                //This is the fully qualified name of my class, including package name (de.myapp.gradle) and the classname (ConfigureCustomer)
                main = "com.daniel.demotest.ConfigureCustomer"
                //Pass in arguments - in this case the customer's name and the version name for the app (from AndroidManifest.xml)
                args flavor.name, variant.versionName
            }
        }
    }
}



dependencies {
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.2.0'


//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'androidx.test:core:1.2.1-alpha02'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    testImplementation "io.mockk:mockk:1.9.3.kotlin12"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    testImplementation "androidx.arch.core:core-testing:2.1.0"

    testImplementation 'io.cucumber:cucumber-java8:4.3.1'
    testImplementation 'io.cucumber:cucumber-junit:4.3.1'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.1.0'
    testImplementation('com.squareup.okhttp3:mockwebserver:4.1.0')
    implementation 'com.squareup.okhttp3:okhttp:4.1.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    def mockk_version = "1.9.3.kotlin12"
    testImplementation "io.mockk:mockk:$mockk_version"
    androidTestImplementation("io.mockk:mockk-android:$mockk_version") { exclude module: 'objenesis' }
    androidTestImplementation 'org.objenesis:objenesis:2.6'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.1.0'


    testImplementation('com.squareup.okhttp3:mockwebserver:4.1.0')


    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0-M1'
}
